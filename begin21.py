#id это функция которая возвращает идентификатор объекта на который ссылается переменная
# a = b = c = 0
# print(id(a), id(b), id(c))
# a, b = 1, 2
# a, b = b ,a # обмен значениями
# print(a, b)
# s = "Hello"
# c = 10
# print(type(s), type(c))#вывели класс типа данных
# в качестве имен переменных нельзя использовать ключевые слова и встроенные функции, посмотреть список можно если в python console набрать help, и потом написать keywords, выведется список ключевых слов
#если название встроенной функции использовать как переменную, то эта функция перестанет работать в нашей программе
#функции подсвечиваются синим цветом и также если мы функцию запишем в переменную она будет подчеркнута
#Числа и операции над ними!!!!!
#типы данных для чисел
#int целочисленный, float вещесетнвенный или дробный, complex для комплексных чисел
#int подерживает большой диапазон значений отрицательных и положительных чисел
#float поддерживает отрицательные и положительные дробные значения, тоже не маленький диапазон
#арифметические операции
#+ сложение - вычитание * умножение / // 2 способа деления % остаток от деления ** возведение в степень
#в консоли питона есть служебная переменная _ она выводит последнее значение
#сложение работает так, что складываются 2 значения то есть 2 объекта и формируется третий объект, и оператор присваивания делает ссылку на новый третий объект, который получился в результате сложения
#потом 2 предыдущих объекта автоматически удаляются сборщиком мусора
#арифметические операции выолняются слева направо
#a = 5 + 3 + 4
#сначала 5 складывается с 3 потом результат складывается с 4
#при сложении целого и вещественного числа результат будет вещественное
#при делении любых числе результат всегда вещественный
#// это деление с округлением к наименшему целому
# print(7/2)
# print(7//2)
# print(-7//2)#если отрицательные наименьшее идет в отрицательную сторону
#когда 1 из операндов вещественный, то результат становится вещественным
#остаток от деления
#print(10%3)#будет 1, так как нацело делится 9 на 3 и остается 1 это и есть остаток от деления
#вычисление остатка от деления при отрицательных числах, тут все сложнее на много
#при делении отрицательного числа остаток от деления вычисляется по формуле делимое минус наименьшее кратное числа на которые делим
#например
#print(-9%5)#будет 1, так как это вычисляется так -9 -(-10)= 1
#print(9% -5)#будет -1, так как это вычисляется так 9 - 10 = -1, тут мы берем следующее кратное после цифры 9, то есть берем кратное которые превышает значение 9
#если оба числа отрицательные то вычиляется стандартно как если бы они были положительными, только результат будет отрицательным
#print(-9%-5)
#степень
# print(2**3)#2 в степени 3
# print(16**0.5)#корень из 16, значение вещественное
# print(2**3**2)#эта операция выполняется справа налево, а не слева направо как остальные операции математики. Сначала выполнится 3 в квадрате, потом бдует 2 в 9 степени
# #приоритет возведения в степень выше чем другие операции
# print(27**1/3)#будет 9, так как сначала степень срабатывает, потом деление
# #если нужно поменять приоритет то нужно поставить круглые скобки
# print(27**(1/3))#тут будет 3, то есть кубический корень из 27
# #стандартные математические операции выполняются как обычно
# a = 5
# b = 4
# a +=1
# b -= 2# сокращенные операции увеличения или уменьшения переменных
#сокращенные операции работают со всеми математическими операциями
# ввод целого числа
# d1, d2, d3, d4, d5 = map(int, input().split())
#
# print(min(d1, d2, d3, d4, d5))
# ввод данных
# a, b = map(int, input().split())
#
# # здесь продолжите программу
# f = (a**2 + b**2)**0.5
# z = 1.16584564568
# print(round(z, 2))
# ввод данных
# import math
# n, k = map(int, input().split())
#
#
# c = (math.factorial(n))/((math.factorial(k))*(math.factorial(n-k)))
# print(c)
# import math
# n, m = map(int, input().split())
#
# # здесь продолжите программу
# a = (n+m)/20
# print(math.ceil(a))

# x = int(input())
#
# # здесь продолжите программу
# count = 500/(x-(x*0.1))
# print(int(count))
#Функции print и input!!!!!!!!!!
#sep это разделитель, пишется как sep = " | ", теперь между аргументами функции print() будут " | "
#print(5, 3, sep=" | ")
#параметр end у функции print() по умолчанию имеет значение "\n", он пишется именно в кавычках это перевод строки на следующую
#если ему присвоить что-то другое, то строка не будет переходить, а будет то что мы туда напишем
# print("Hello", end=" ")# обе записи выведутся в одну строку и поставится пробел между ними
# print("World")
#F-строки
# x = 5.4
# y = -7
# # print("координаты точки: х = ", x, "; y = ", y, sep="")# это обычный вывод
# print(f"координаты точки: х = {x}; y = {y}")#вывели в консоль с помощью f строки, это удобнее
# a = input()#ввод инфы от пользователя всегда тип данных строка
# #a = int(a)#нужно перевести в целые числа, тогда ошибки не будет
# #но если нужно перевести в вещественные числа, то из символа "." который является строкой выходится ошибка
# #можно воспользоваться функцией float, которая переводит в дробные цифры
# a = float(a)
# b = abs(a)#будет ошибка так как ввод данных всегда нужно переводить в цифры
# #print(a, type(a))#введенные данные от пользователя всегда являются типом данных строка
# print(b)
#периметр прямоугольника
# a = float(input("введите длину прямоугольника "))
# b = float(input("введите ширину прямоугольника "))
# print("Периметр: ", 2*(a+b))
#ввод значений через пробел
# a, b = map(float, input("Введите значения сторон прямоугольника: ").split())#это конструкция для ввода значений через пробел, значения будут присвоены переменным поочередно, также ввод наш переводится в тип данных float
# print("Периметр: ", 2*(a+b))
# a, b, c = map(float, input("Введите значения сторон треугольника: ").split())
# print("Периметр: ", a+b+c)
# a = 7
# b = -4
# c = 3
# print(a, "\n", b, "\n", c, sep="")
# a = abs(int(input()))
# b = abs(int(input()))
# print(a**b)
#Логический тип Bool. Операторы сравнения!!!!!!!!!!!!
#в питоне можно сравнивать цифры, если одно число больше другого то истина, если при этом по фатку это не так то ложь
#также результат сравенения можно записать в переменную
# a = 5
# b = 7
# res = a > b
# print(res)# вывели результат сравнения в консоль
# print(type(res))#вывели тип данных в консоль, boolean, то есть логический
# #у этого типа данных всего 2 значения, True и False
# #операторы сравнения возвращают значения булевого типа True False, есть вероятность что эти операторы это функции встроенные в питоне
# #операторы сравнения: < > <= >= == !=
# #при сравнении можно использовать цифры, также можно использовать математические действия или любые конструкции
# print(8>=8)#тру
# print(8>8)#фолс
#также двойные операторы типа >= знак равно всегда ставить после знака > или <
#сравнения равенства всегда нужно писать 2 знака равно, если поставим 1 , то это будет ошибка, так как 1 знак равно это знак присваивания
#пример применения оператора сравнения
#x = 7
# print(x % 2 == 0)#будет False, проверка на четность
# print(x % 2 != 0)#проверка на нечетность
# z = 9
# print(z % 3 == 0)#проверка кратности, тут число кратно 3, и будет результат True
#y = 1.58
#проверка принадлежности диапазону чисел
#print(y >= -2 and y <=5)#проверка принадлежит ли наше число диапазону от -2 до 5
#будет значение истина, так как сработали оба условия, оператор and говорит нам что должны сработать оба условия чтобы была истина
#проверка непринадлежности диапазону цифр
#print(y <= -2 or y >= 5)#проверка на то что число не принадлежит диапазону, истина будет тогда когда выполится или первое или второе условие, или оба условия истины, и ложь когда оба не выполняются
#или
#print(-2 >= y <= 5)#это тоже самое что и с оператором and, такое же двойное условие, для проверки принадлежности диапазону
#print(x%2 == 0 or x%3== 0)#также проверка на кратность
#print(x%2 != 0 or x%3 != 0)#проверка на некратность
#также можно использовать оператор not
#print(not(x%2 == 0 or x%3== 0))#пишет not и условия в скобках, типа если условия выполняются то будет тру и оператора not возвращает обратное значение False. Это по сути также проверка на некратность
#у оператора not самый высокий приоритет при сравнениях, сначала выполняется оператор not, потом другие условия
#приоритеты операторов сравнения
#1 not - самый высокий
#2 and - второй по приоритету
#3 or - самый низний по приоритету
#функция bool(), если входной аргумент(то есть значение в скобках) пусто, то будет ложь
#то есть любая цифра в скобках это будет истина True, а если там будет 0, то будет False
#то есть 0 это как пустое значение
#также и со строками, если там пусто просто кавычки и между ними ничего, то это будет False, если что написать даже пробел считается за символ, то это будет True
#аналогично с другими типами данных, их еще много, типы данных от классов объектов конструкторов и тд

# k = round(float(input()), 2)
# c = int(k)
# d = k - c
# print(d)
# print(d > 0.50)

# a, b, c = map(int, input().split())
# print((a + b) > c and (a + c) > b and (c + b) > a)
#Введение в строки. Операции над строками
#чтобы присвоить переменной строку нужно строку писать в кавычках одинарных или двойных
# a = "Word"
# b = 'Hello'
# print(a, b)
#также можно задать строку с помощью тройных кавычек, это будет многострочное присвоение, можно писать как двойные так и одинарные тройные кавычки
# # text = '''Вначале было слово
# и слово это было всегда
# бла бла бла
# '''
#текст можно писать в этом случае в нескольких строках с переходами не следующую строку и в этом случае фукнция print добавляет переход строки \n автоматом сама когда переходим на следующую строку в нашем коде
# print(text)
#можно присвоить переменной пустую строку, или пробел, тогда будет присвоен 1 символ, проблем это тоже символ
#базовые операции со строками
# a = "Hello"
# b = "world"
# print(a + b)#это сложение строк или это еще называется конкатенация строк
# #строки можно складывать только со строками, если нужно сложить с числом, то число нужно перевести в строковый тип данных с помощью функции str, она может преобразовать в строку любой тип данных
# #можно умножать строки, но только на целое число
# print("Hai " * 5)
# #функция len, позволяет вычислять колво символов в строке
# print(len("Hello world!"))#результат будет целое число
# #в качестве аргумента можно передавать или строку или строковую переменную
# #оператор in
# print("el" in "Hello world")#проверяет есть в строке "Hello world" элемент el и возвращается значение тру или фолс
# #сравнение строк
# print(a == "Hello")#проверка на равенство
# print(a != "Hello ")#пробел это тоже символ, поэтому строки не равны
#также можно сравнивать строки какая больше или меньше, для этого сравниваются символы поочередно, и сравниваются их номера в алфавите, как только какой символ удастся сравнить, другие перестают сравниваться и игнорируются
#print("кот" > "кит")
#коды малых букв больше коды загланых букв исходя из таблицы символов ASCII, там перечислены цифровые коды всех символов
#print("Кот" > "кит")#будет фолс так как код большой буквы меньше чем маленькой
#есть функция ord() она показывает код буквы которую мы передадим в эту функцию в качестве аргумента
# print(ord("К"))
# print(ord("к"))#коды будут разные и у малой будет цифра кода больше, так и сравниваются строки
#строки относятся к неизменяемым типам данных
# a, b = map(str, input().split())
# print(((a + " ") * 2) + ((b + " ") * 3))
# a, b = map(str, input().split())
# print("Коды:", a, "=", str(ord(a)) + ",", b, "=", ord(b))

#Спецсимволы и экранирование символов!!!!
#в многострочной строке есть символы перевода строки \n
#если посчитать символы в такой строке то символ перевода строки занимает 1 символ не смотря на то что там 2 символа используется
# a = "snake is super snake\n in the world"
# print(a)
# print(len(a))
# #спецсимволов много, начинаются они с \ это обратный слеш. Также эти спец символы можно все нагуглить
# b = "\tsnake is super snake\n in the world"#\t это табуляция
# print(b)
#надо обратный слеш не ставить перед символами с которыми формируются спецсимволы, например перед буквой n нельзя ставить \ потому что получится переводв строки
#чтобы написать символ обратного слеша именно перед буквой n например то надо написать 2 обратных слеша
#процесс написания обратныз слешей называется экранирование. Используетс янапример при прописании пути к файлу или папке
#это нужно чтобы обратные слеши работали как обратные слеши а не табуляция или перенос строки
#также экранирование это 1 символ считается, не смотря на то что там 2 слеша
#также экранировать можно и кавычки как одинарные так и двойные, либо можно использовать разные кавычки вместо экранирования кавычек
#row строки или сырые строки
# a = "D:\\python\\begin"#сделали экранирование
# a = r"D:\\python\\begin"#поставили букву r перед строй и теперь это row строка, то есть все символы в ней воспринимаются так как они написаны и спецсимволы уже не срабатывают, то есть двойные слеши уже можно не писать
# print(a)





















